services:
  # ───────────── Datenbanken ─────────────
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ai
      POSTGRES_DB: ai_org
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: redis-server --save 60 1 --loglevel warning --requirepass ai_redis_pw
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ai_redis_pw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5
    environment:
      - NEO4J_AUTH=neo4j/s3cr3tP@ss
    ports:
      - "7687:7687"   # Bolt
      - "7474:7474"   # Browser UI
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p s3cr3tP@ss 'RETURN 1'"]
      interval: 10s
      timeout: 10s
      retries: 6

  # ───────────── Celery-Worker ───────────
  celery-architect:
    build:
      context: ../backend/ai_org_backend   # Ordner mit Dockerfile & requirements.txt
    image: local/ai_backend:latest
    command: >
      celery -A ai_org_backend.tasks.celery_app worker
             -Q demo:architect
             -l INFO -P solo
    environment:
      - REDIS_URL=redis://:ai_redis_pw@redis:6379/0
      - CELERY_APP=ai_org_backend.tasks.celery_app
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASS=s3cr3tP@ss
      - DATABASE_URL=postgresql://postgres:ai@postgres:5432/ai_org
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  celery-insight:
    build: { context: ../backend/ai_org_backend }
    image: local/ai_backend:latest
    command: >
      celery -A ai_org_backend.tasks.celery_app worker
             -Q demo:insight
             -l INFO -P solo
    environment:
      - REDIS_URL=redis://:ai_redis_pw@redis:6379/0
      - CELERY_APP=ai_org_backend.tasks.celery_app
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASS=s3cr3tP@ss
      - DATABASE_URL=postgresql://postgres:ai@postgres:5432/ai_org
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  celery-dev:
    build: { context: ../backend/ai_org_backend }
    image: local/ai_backend:latest
    command: >
      celery -A ai_org_backend.tasks.celery_app worker
             -Q demo:dev,demo:qa,demo:ux_ui,demo:telemetry
             -l INFO -P solo
    environment:
      - REDIS_URL=redis://:ai_redis_pw@redis:6379/0
      - CELERY_APP=ai_org_backend.tasks.celery_app
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASS=s3cr3tP@ss
      - DATABASE_URL=postgresql://postgres:ai@postgres:5432/ai_org
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  # ───────────── Application ───────────
  ai-app:
    build: { context: ../backend/ai_org_backend }
    image: local/ai_backend:latest
    command: uvicorn ai_org_backend.main:app --host 0.0.0.0 --port 9102
    environment:
      - REDIS_URL=redis://:ai_redis_pw@redis:6379/0
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASS=s3cr3tP@ss
      - DATABASE_URL=postgresql://postgres:ai@postgres:5432/ai_org
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "9102:9102"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy

  orchestrator:
    build: { context: ../backend/ai_org_backend }
    image: local/ai_backend:latest
    command: >
      /bin/sh -c 'alembic -c /app/alembic.ini upgrade head && python -m ai_org_backend.orchestrator.scheduler'
    environment:
      - REDIS_URL=redis://:ai_redis_pw@redis:6379/0
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASS=s3cr3tP@ss
      - DATABASE_URL=postgresql://postgres:ai@postgres:5432/ai_org
      - QDRANT_URL=http://qdrant:6333
      - TENANT=demo
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant:v1.15.1
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
  neo4j_data:
  qdrant_storage:
